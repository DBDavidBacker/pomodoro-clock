class PomodoroClock extends React.Component {
  constructor(props){
    super(props);
    this.state={
      minutes: 25,
      seconds: 0,
      session: 25,
      break: 5,
      display: '25:00',
      status: "start",
      counter: 'off',
      timer: 'session'
    }
    this.timerFunc = this.timerFunc.bind(this)
    this.startFunc = this.startFunc.bind(this)
    this.countFunc = this.countFunc.bind(this)
    this.pauseFunc = this.pauseFunc.bind(this)
    this.resetFunc = this.resetFunc.bind(this)
    this.sessionFunc = this.sessionFunc.bind(this)
    this.breakFunc = this.breakFunc.bind(this)
    
  }
  
 
  
  timerFunc = () => {
    let m = this.state.minutes
    let s = this.state.seconds
    
    if(s < 10){
      s = `0${s}`
    }
    
    this.setState({
      display: m
    })
     
  }
  
  startFunc = () => {
    let m = this.state.minutes
    let s = this.state.seconds
    
     if(this.state.status == "play"){
    if(m>0){
     
   if(s==0){
     s= 59
     m = m-1 
   }else{
     s = s-1
      }
     
      
      if(s < 10){
      s = `0${s}`
      }
     if (m >= 10){
      this.setState({
        minutes: m,
        seconds: s,
        display: `${m}:${s}`
      })}
      else{
      this.setState({
        minutes: m,
        seconds: s,
        display: `0${m}:${s}`
      })}
   
    }else if(m==0 && s>0){
      s = s - 1
    
       if(s < 10){
      s = `0${s}`
      }
    
     this.setState({
        minutes: m,
        seconds: s,
        display: `0${m}:${s}`
      })
     }
       if(m == 0 && s== 0){
         document.getElementById('beep').play()
         if(this.state.timer == "session"){
           m = this.state.break
           s = 1
           this.setState({
             minutes: m,
             seconds: s,
             timer: " break"
           })
         }else{
            m = this.state.session
           s = 1
           this.setState({
             minutes: m,
             seconds: s,
             timer: "session"
         })}
       }
       
     }
  }
  
  
  countFunc = () =>{
    
    let counter = setInterval(this.startFunc, 1000)
      
    
            
      this.setState({
        counter: 'on'
      })   
  }
  
  
  pauseFunc = () =>{
    

    
    if(this.state.status=="play"){
      this.setState({
        status: "paused"
      })
     
    }
    else if(this.state.status =="start" && this.state.counter=="off"){
      this.countFunc()
      
      this.setState({
        status: "play"
      })
    } else if (this.state.status=="start" && this.state.counter=="on"){
   setTimeout(function(){this.setState({
        status: 'play'
      })}.bind(this), 0 )   
    }
      
    else{
    
      this.setState({
        status: 'play'
      })
    }
    
  }
  
  resetFunc = () =>{
   document.getElementById('beep').pause()
    document.getElementById('beep').currentTime = 0
    this.setState({
      minutes: 25,
      seconds: 0,
      display: "25:00",
      break: 5,
      session: 25,
      status: 'paused',
      timer: 'session'
    })
    this.setState({
      status: 'start'
    })
  }
  
 sessionFunc=(x) =>{
   
   if(this.state.status != "play"){
   let s = this.state.session
   s = s + x
   if(s<1){
     s = 1
   }
     if(s>60){
       s = 60
     }
     
    
   this.setState({
     session: s,
     status: "start"
      })
     
      if(this.state.timer == "session"){
        if(s>=10){
         this.setState({minutes: s,
     seconds: 0,
     display: `${s}:00`,})
       }else{
         this.setState({minutes: s,
     seconds: 0,
     display: `0${s}:00`,})
       }
      }
   }
 }
  
 
  
  breakFunc=(x)=>{
     if(this.state.status != "play"){
   let s = this.state.break
   s = s + x
   if(s<1){
     s = 1
   }
       if(s>60){
       s = 60
     }
   this.setState({
     break: s,
     status: "start"    
      })
       
       if(this.state.timer == "break"){
        if(s>=10){
         this.setState({minutes: s,
     seconds: 0,
     display: `${s}:00`,})
       }else{
         this.setState({minutes: s,
     seconds: 0,
     display: `0${s}:00`,})
       }
       }
   }
  }
  
 
  
  
  render(){
    return(
    <div>
        <h1>pomodoro clock</h1>
       
       <div id="main-panel"> 
        <h2 id="session-label">session length</h2>
         <h2 id="break-label">break length</h2>   
          <div id="session-control">
           
         <button id="session-decrement" onClick={()=>this.sessionFunc(-1)}><i className ="fa fa-arrow-down"></i></button>   
        <h2 id ="session-length">{this.state.session}</h2>        
         <button id="session-increment" onClick={()=>this.sessionFunc(1)}><i className ="fa fa-arrow-up"></i></button>
         </div>
         
         <div id="break-control">
       <button id="break-decrement" onClick={()=>this.breakFunc(-1)}><i className ="fa fa-arrow-down"></i></button>
        <h2 id="break-length">{this.state.break}</h2>           
   <button id="break-increment" onClick={()=>this.breakFunc(1)}><i className ="fa fa-arrow-up"></i></button>
         </div>  
         <div id="displays">
        <h2 id="timer-label">{this.state.timer}</h2>
        <h2 id="time-left">{this.state.display}</h2>
         </div> 
        </div>
        <audio id="beep"  src="https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav"/>
        <button id="start_stop" onClick={this.pauseFunc}><i class="fa fa-play" aria-hidden="true"></i><i class="fa fa-pause" aria-hidden="true"></i></button>
        <button id="reset"  onClick={this.resetFunc}><i class="fa fa-refresh" aria-hidden="true"></i> </button>
        <h4>programmed by david backer</h4>
    </div>
    )
  }
}

ReactDOM.render(<PomodoroClock />, document.getElementById('root'))
